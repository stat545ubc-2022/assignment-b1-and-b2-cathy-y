library(tidyverse)
library(tidyverse)
most_frequent <- function(df, factor){
tallied <- df %>%
group_by(factor) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
head(mtcars)
glimpse(mtcars)
head(gapminder)
library(teachr)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
most_frequent_iris <- most_frequent(iris, Species)
most_frequent_iris <- most_frequent(iris, "Species")
most_frequent <- function(df, factor){
tallied <- df %>%
group_by_at(factor) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, "Species")
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
most_frequent <- function(df, factor){
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, "Species")
print(most_frequent_iris)
most_frequent <- function(df, factor){
stopifnot(is.factor(df$factor))
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, "Species")
is.factor(iris$Species)
most_frequent_iris <- most_frequent(iris, Species)
most_frequent_iris <- most_frequent(iris, Species)
stopifnot(column)
most_frequent <- function(df, factor){
column <- df$factor
stopifnot(column)
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, Species)
most_frequent_iris <- most_frequent(iris, Species)
most_frequent <- function(df, factor){
column <- df$factor
stopifnot(is.factor(column))
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, Species)
most_frequent_iris <- most_frequent(iris, Species)
stopifnot(is.factor(df[,factor]))
most_frequent <- function(df, factor){
column <- df$factor
stopifnot(is.factor(df[,factor]))
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, Species)
most_frequent <- function(df, factor){
stopifnot(is.factor(df[,factor]))
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, "Species")
print(most_frequent_iris)
most_frequent_disp <- most_frequent(mtcars, "disp")
most_frequent <- function(df, factor){
stopifnot(is.factor(df[,factor]))
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied
return(output)
}
most_frequent_iris <- most_frequent(iris, "Species")
print(most_frequent_iris)
most_frequent <- function(df, factor){
stopifnot(is.factor(df[,factor]))
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull()
output <- tallied[1]
return(output)
}
most_frequent_iris <- most_frequent(iris, "Species")
print(most_frequent_iris)
most_frequent <- function(df, factor){
stopifnot(is.factor(df[,factor]))
tallied <- df %>%
group_by_at(all_of(factor)) %>%
summarize(count = n()) %>%
filter(count == max(count)) %>%
select(factor) %>%
pull() %>%
as.character()
output <- tallied
return(output)
}
most_frequent_iris <- most_frequent(iris, "Species")
print(most_frequent_iris)
tallied <- iris %>%
group_by_at(all_of(Species)) %>%
summarize(count = n())
tallied <- iris %>%
group_by_at(all_of("Species")) %>%
summarize(count = n())
View(tallied)
data()
glimpse(Titanic)
Titanic$Class <- as.factor(Titanic$Class)
Titanic$Class
Titanic <- as.data.frame(Titanic)
Titanic$Class <- as.factor(Titanic$Class)
most_frequent_class <- most_frequent(Titanic, "Class")
print(most_frequent_class)
tallied <- Titanic %>%
group_by_at(all_of("Class")) %>%
summarize(count = n())
View(tallied)
View(Titanic)
head(fish_encounters)
fish_encounters <- as.data.frame(fish_encounters)
View(fish_encounters)
fish_encounters <- as.data.frame(fish_encounters)
fish_encounters$station <- as.factor(fish_encounters$station)
most_frequent_station <- most_frequent(fish_encounters, "station")
print(most_frequent_station)
fish_encounters <- as.data.frame(fish_encounters)
fish_encounters$station <- as.factor(fish_encounters$station)
most_frequent_station <- most_frequent(fish_encounters, "station")
print(levels(fish_encounters$station))
print(most_frequent_station)
sample_df <- data.frame("cake" = c("red velvet", "red velvet", "vanilla", "chocolate", "red velvet", "red velvet"),
"client" = c("client 1", "client 1", "client 2", "client 2", "client 3", "client 3"),
"cost" = c(12, 12, 14.50, 10.25, 12, 12))
sample_df$cake <- as.factor(sample_df$cake)
sample_df$client <- as.factor(sample_df$client)
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
})
library(testthat)
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
})
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
})
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
})
"is.factor(df[, factor]) is not TRUE" == "is.factor(df[, factor]) is not TRUE"
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_equal(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
})
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
})
sample_df <- data.frame("cake" = c("red velvet", "red velvet", "vanilla", "chocolate", "red velvet", "red velvet"),
"client" = c("client 1", "client 1", "client 2", "client 2", "client 3", "client 3"),
"cost" = c(12, 12, 14.50, 10.25, 12, 12))
sample_df$cake <- as.factor(sample_df$cake)
sample_df$client <- as.factor(sample_df$client)
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE")
})
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE", fixed = T)
tests <- test_that("Testing frequency function", {
expect_equal(most_frequent(sample_df, "cake"), "red velvet")
expect_equal(most_frequent(sample_df, "client"), c("client 1", "client 2", "client 3"))
expect_error(most_frequent(sample_df, "cost"), "is.factor(df[, factor]) is not TRUE", fixed = T)
})
library(devtools)
usethis::create_package("cathystat545")
document()
usethis::use_readme_rmd()
usethis::use_mit_license()
usethis::use_test(...)
usethis::use_test()
usethis::use_test(most_frequent)
?use_test
usethis::use_test()
?stopifnot
?is.factor
?all_of
?group_by_at
devtools::check()
devtools::check()
document()
wd()
getwd()
